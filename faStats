#!/usr/bin/env python

from Bio import SeqIO
from Bio.SeqUtils import GC
import sys
from numpy import median
import plotille

# import matplotlib as mpl ##These two lines are needed
# mpl.use('Agg') # to plot without a X server running.
# import matplotlib.pyplot as plt
from collections import Counter
import gzip
from mimetypes import guess_type
from functools import partial

# Author : Maxime Borry
# Contact : maxime.borry@gmail.com
# Usage : faStats file.fa
# Summary : Computes sequences length statistics of a fasta file


def maxprint(elem, maxcount):
    return int(elem / maxcount * 80)


def getmax(thecounter):
    themax = 0
    for elem in sorted(list(set(thecounter.elements()))):
        if thecounter[elem] > themax:
            themax = thecounter[elem]
    return themax


def n50(list_of_lengths):
    """Calculate N50 for a sequence of numbers.

    Args:
        list_of_lengths (list): List of numbers.

    Returns:
        float: N50 value.

    """
    tmp = []
    for tmp_number in set(list_of_lengths):
        tmp += [tmp_number] * list_of_lengths.count(tmp_number) * tmp_number
    tmp.sort()

    if (len(tmp) % 2) == 0:
        median = (tmp[int(len(tmp) / 2) - 1] + tmp[int(len(tmp) / 2)]) / 2
    else:
        median = tmp[int(len(tmp) / 2)]

    return median


seq_length = []
genome_seq = ""
filename = sys.argv[1]
encoding = guess_type(filename)[1]  # uses file extension
_open = partial(gzip.open, mode="rt") if encoding == "gzip" else open
print("Loading fasta file...")
with _open(filename) as f:
    for seq_record in SeqIO.parse(f, "fasta"):
        seq_length.append(len(seq_record.seq))
        genome_seq += seq_record.seq
cnt = Counter(seq_length)
themax = getmax(cnt)
gc_content = GC(genome_seq)
total_len = sum(seq_length)

print("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -")
print(filename + " fasta file statistics : ")
print("* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *")
print("Number of sequences              : " + str(len(seq_length)))
print("Total sequence length            : " + str(total_len))
print(
    "Average sequence length          : "
    + str(round(sum(seq_length) / len(seq_length), 2))
)
print("Median sequence length           :", str(median(seq_length)))
print("N50                              :", str(n50(seq_length)))
print("Max sequence length              : " + str(max(seq_length)))
print("Min sequence length              : " + str(min(seq_length)))
print("Global GC content                : " + str(round(gc_content, 2)) + "%")
print(
    "Percentage of 'N's in the genome : "
    + str(round((genome_seq.count("N") / total_len) * 100, 2))
    + "%"
)
print("Sequence length distribution     :")
bins = min(30, max(1, int(len(seq_length) / 5)))
print(plotille.hist(seq_length, width=60, bins=bins))
