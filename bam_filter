#!/usr/bin/env python3

import argparse
import multiprocessing
import sys
from functools import partial
import pysam


def get_args():
    '''This function parses and return arguments passed in'''
    parser = argparse.ArgumentParser(
        prog='bam_filter',
        description='Filter bam on identity')
    parser.add_argument(
        'bam',
        help="Bam aligment file")
    parser.add_argument(
        '-i',
        dest='identity',
        default=0.85,
        help='Identity threshold to retain read alignment. Default = 0.85'
    )
    parser.add_argument(
        '-o',
        dest="output",
        default=None,
        help="Output file basename. Default = {bam_basename}.filtered.bam")

    args = parser.parse_args()

    bam = args.bam
    identity = float(str(args.identity))
    outfile = args.output

    return(bam, identity, outfile)


def getBasename(file_name):
    if ("/") in file_name:
        basename = file_name.split("/")[-1].split(".")[0]
    else:
        basename = file_name.split(".")[0]
    return(basename)


def getNumberMappedReads(bam, id, outfile):
    mapped_reads = []
    min_identity = id

    bamfile = pysam.AlignmentFile(bam, "rb")
    bamwrite = pysam.AlignmentFile(
        outfile + ".filtered.bam", "wb", template=bamfile)

    for read in bamfile.fetch():
        mismatch = read.get_tag("NM")
        alnLen = read.query_alignment_length
        readLen = read.query_length
        identity = (alnLen - mismatch) / readLen
        if identity >= min_identity:
            bamwrite.write(read)
    return(0)


if __name__ == "__main__":
    BAM, ID, OUTFILE,  = get_args()

    if OUTFILE is None:
        OUTFILE = getBasename(BAM)

    getNumberMappedReads(bam=BAM, id=ID, outfile=OUTFILE)
